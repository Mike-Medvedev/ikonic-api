"""added timezones to timestamps.

Revision ID: ac817b4a2bf5
Revises: 3df643050173
Create Date: 2025-06-08 22:20:11.680077

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ac817b4a2bf5'
down_revision: str | None = '3df643050173'
branch_labels: str | list[str] | None = None
depends_on: str | list[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('cars', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cars', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('cars_trip_id_fkey'), 'cars', type_='foreignkey')
    op.drop_constraint(op.f('cars_owner_fkey'), 'cars', type_='foreignkey')
    op.create_foreign_key(None, 'cars', 'trips', ['trip_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.create_foreign_key(None, 'cars', 'users', ['owner'], ['id'], source_schema='public', referent_schema='public')
    op.alter_column('friendships', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('friendships', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('friendships_addressee_id_fkey'), 'friendships', type_='foreignkey')
    op.drop_constraint(op.f('friendships_requester_id_fkey'), 'friendships', type_='foreignkey')
    op.create_foreign_key(None, 'friendships', 'users', ['requester_id'], ['id'], source_schema='public', referent_schema='public')
    op.create_foreign_key(None, 'friendships', 'users', ['addressee_id'], ['id'], source_schema='public', referent_schema='public')
    op.alter_column('invitations', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('invitations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('invitations_user_id_fkey'), 'invitations', type_='foreignkey')
    op.drop_constraint(op.f('invitations_trip_id_fkey'), 'invitations', type_='foreignkey')
    op.create_foreign_key(None, 'invitations', 'trips', ['trip_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.create_foreign_key(None, 'invitations', 'users', ['user_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.alter_column('passengers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('passengers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('passengers_car_id_fkey'), 'passengers', type_='foreignkey')
    op.drop_constraint(op.f('passengers_user_id_fkey'), 'passengers', type_='foreignkey')
    op.create_foreign_key(None, 'passengers', 'users', ['user_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.create_foreign_key(None, 'passengers', 'cars', ['car_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.alter_column('trips', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('trips', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('trips_owner_fkey'), 'trips', type_='foreignkey')
    op.create_foreign_key(None, 'trips', 'users', ['owner'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'trips', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('trips_owner_fkey'), 'trips', 'users', ['owner'], ['id'], ondelete='CASCADE')
    op.alter_column('trips', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('trips', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'passengers', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'passengers', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('passengers_user_id_fkey'), 'passengers', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('passengers_car_id_fkey'), 'passengers', 'cars', ['car_id'], ['id'], ondelete='CASCADE')
    op.alter_column('passengers', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('passengers', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'invitations', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'invitations', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('invitations_trip_id_fkey'), 'invitations', 'trips', ['trip_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('invitations_user_id_fkey'), 'invitations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('invitations', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('invitations', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'friendships', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'friendships', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('friendships_requester_id_fkey'), 'friendships', 'users', ['requester_id'], ['id'])
    op.create_foreign_key(op.f('friendships_addressee_id_fkey'), 'friendships', 'users', ['addressee_id'], ['id'])
    op.alter_column('friendships', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('friendships', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'cars', schema='public', type_='foreignkey')
    op.drop_constraint(None, 'cars', schema='public', type_='foreignkey')
    op.create_foreign_key(op.f('cars_owner_fkey'), 'cars', 'users', ['owner'], ['id'])
    op.create_foreign_key(op.f('cars_trip_id_fkey'), 'cars', 'trips', ['trip_id'], ['id'], ondelete='CASCADE')
    op.alter_column('cars', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cars', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))

    # ### end Alembic commands ###
